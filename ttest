import Base.*

mutable struct Perm
    a::Vector{Int}
    function Perm(arr::Vector{Int})
        length(arr) != length(unique(arr)) && error("All elements must be unique")
        sort(arr) == collect(1:length(arr)) || error("$arr must be a permutatin od a 1 based range")
        return new(arr)
    end
end

""" Make a Perm from an iterable """
function Perm(iterable)
    items = unique(collect(iterable))
    itemtoint = Dict(p[2] => p[1] for p in enumerate(items))
    return Perm([itemtoint[c] for c in items])
end

function cycles(p::Perm)


end

function Base.:*(p1:: Perm, p2::Perm)
    length(p1) != length(p2) && error("To compose permutations, they must be the same length")
    newarr = [p1.a[p2.a[i]] for i in eachindex(p1)]
    return Perm(dat)
end

"""
    cycles(p::Permutation)
Return a list of the cycles in `Permutation` `p`.
"""
function cycles(p::Permutation)
    n = length(p)
    result = Array{Int,1}[]
    todo = trues(n)
    k = 1
    while k !== nothing
        todo[k] = false
        cycle = [k]
        j = p[k]
        while j != k
            push!(cycle, j)
            todo[j] = false
            j = p[j]
        end
        push!(result, cycle)
        k = findnext(todo, k)
    end
    return result
end

"""
    cycle_string(p::Permutation)
Create a nice, prinatble string representation
from the cycle structure of the permutation `p`.
"""
function cycle_string(p::AbstractPermutation)::String
    if length(p) == 0
        return "()"
    end
    str = ""
    cc = cycles(p)
    for c in cc
        str *= array2string(c)
    end
    return str
end

# helper function for cycle_string (not exposed). Converts an integer
# array such as [1,3,5,2] into the string "(1,3,5,2)".
function array2string(a::Array{Int,1})
    n = length(a)
    res = "("
    for k = 1:n
        res *= string(a[k])
        if k < n
            res *= ","
        else
            res *= ")"
        end
    end
    return res
end
