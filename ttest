
struct AdditionChains
    chains::Vector{Vector{Int}}
    last_chain::Int
    last_element::Int
    AdditionChains() = new([[1]], 1, 1)
end

function Base.iterate(acs::AdditionChains, state = 0)
    i, j = acs.last_chain, acs.last_element
    newchain = [acs.chains[i]; acs.chains[i][end] + acs.chains[j]]
    if j == length(acs.chains[i])
        acs.last_chain += 1
        acs.last_element = 1
    else
        acs.last_element += 1
    end
    push!(acs.chains. newchain)
    return newchain, state + 1
end

function first_ending!(acs::AdditionChains, n)
    idx = findfirst(a -> a[end] == n, acs.chains)
    if idx == nothing
        for chain in acs()
            chain[end] == n && return chain
        end
    end
    return acs.chains[idx]
end

for (i, arr) in enumerate(get_addition_lists()[1:100])
    print(rpad(length(arr) - 1, 3))
    i % 10 == 0 && println()
end


    

