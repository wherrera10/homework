use gtk4::prelude::*;
use gtk4::{glib, Application, ApplicationWindow, DrawingArea, GestureClick};
use cairo::{Context, FontSlant, FontWeight};
use std::cell::RefCell;
use std::rc::Rc;
use std::sync::{Arc, Mutex};
use std::thread;
use std::time::Duration;
use rand::Rng;

// Constants for sizing and colors
const WINDOW_WIDTH: i32 = 800;
const WINDOW_HEIGHT: i32 = 700;
const CD_DARKER_GREY: (f64, f64, f64) = (56.0/255.0, 56.0/255.0, 56.0/255.0);
const CD_LIGHTER_ORANGE: (f64, f64, f64) = (255.0/255.0, 165.0/255.0, 0.0/255.0);
const CD_PALE_BLUE: (f64, f64, f64) = (152.0/255.0, 197.0/255.0, 218.0/255.0);
const CD_MEDIUM_BLUE: (f64, f64, f64) = (117.0/255.0, 158.0/255.0, 180.0/255.0);

// Button structure for the elevator controls
#[derive(Clone)]
struct Button {
    x: f64,
    y: f64,
    text: String,
    radius: f64,
}
// Button initialization
impl Button {
    fn new(x: f64, y: f64, text: &str, radius: f64) -> Self {
        Self {
            x,
            y,
            text: text.to_string(),
            radius,
        }
    }
}

// Panel structure for the elevator controls
#[derive(Clone)]
struct Panel {
    x: f64,
    y: f64,
    width: f64,
    height: f64,
}
// Panel initialization
impl Panel {
    fn new(x: f64, y: f64, width: f64, height: f64) -> Self {
        Self { x, y, width, height }
    }
}

// Elevator state structure
#[derive(Clone)]
struct ElevatorState {
    cur_floor: i32,
    wait_sign: i32,
    door_open: bool,
    action_count: usize,
    actions: Vec<String>,
}

// Elevator state initialization and management
impl ElevatorState {
    fn new() -> Self {
        Self {
            cur_floor: 0,
            wait_sign: 0,
            door_open: false,
            action_count: 0,
            actions: vec![String::new(); 100],
        }
    }

    fn new_game(&mut self) {
        let mut rng = rand::thread_rng();
        self.cur_floor = rng.gen_range(0..=6);
        self.wait_sign = rng.gen_range(0..=6);
        self.door_open = rng.gen_bool(0.5);
        self.action_count = 0;
        self.actions.fill(String::new());
    }
}

// Set Cairo color translating RGB (all floating, 0 to 1) to r, g, b
fn set_cairo_color(ctx: &Context, color: (f64, f64, f64)) {
    ctx.set_source_rgb(color.0, color.1, color.2);
}

// Draw a rectangle at (x, y) with given width and height
fn draw_rectangle(ctx: &Context, x: f64, y: f64, width: f64, height: f64, 
                 fill_color: (f64, f64, f64), stroke_color: Option<(f64, f64, f64)>) {
    ctx.rectangle(x - width, y - height, width * 2.0, height * 2.0);
    set_cairo_color(ctx, fill_color);
    ctx.fill_preserve().unwrap();
    
    if let Some(stroke) = stroke_color {
        set_cairo_color(ctx, stroke);
        ctx.set_line_width(1.0);
    }
    ctx.stroke().unwrap();
}

// Draw a diamond shape at (x, y) with given width and height
fn draw_diamond(ctx: &Context, x: f64, y: f64, width: f64, height: f64,
               fill_color: (f64, f64, f64), stroke_color: Option<(f64, f64, f64)>) {
    ctx.move_to(x, y - height / 2.0);
    ctx.line_to(x - width / 2.0, y);
    ctx.line_to(x, y + height / 2.0);
    ctx.line_to(x + width / 2.0, y);
    ctx.close_path();
    
    set_cairo_color(ctx, fill_color);
    ctx.fill_preserve().unwrap();
    
    if let Some(stroke) = stroke_color {
        set_cairo_color(ctx, stroke);
        ctx.set_line_width(1.0);
    }
    ctx.stroke().unwrap();
}

// Draw a circle at (x, y) with given radius
fn draw_circle(ctx: &Context, x: f64, y: f64, radius: f64,
              fill_color: (f64, f64, f64), stroke_color: Option<(f64, f64, f64)>) {
    ctx.arc(x, y, radius, 0.0, 2.0 * std::f64::consts::PI);
    set_cairo_color(ctx, fill_color);
    ctx.fill_preserve().unwrap();
    
    if let Some(stroke) = stroke_color {
        set_cairo_color(ctx, stroke);
        ctx.set_line_width(1.0);
    }
    ctx.stroke().unwrap();
}

// Draw text centered at (x, y)
fn draw_text(ctx: &Context, text: &str, x: f64, y: f64, color: (f64, f64, f64), font_size: f64) {
    set_cairo_color(ctx, color);
    ctx.select_font_face("Arial", FontSlant::Normal, FontWeight::Bold);
    ctx.set_font_size(font_size);
    
    let text_extents = ctx.text_extents(text).unwrap();
    ctx.move_to(x - text_extents.width() / 2.0, y - text_extents.height() / 2.0);
    ctx.show_text(text).unwrap();
}

// Draw the elevator and its controls
fn draw_elevator_scene(ctx: &Context, state: &ElevatorState, panels: &[Panel], buttons: &[Button]) {
    // Set background
    set_cairo_color(ctx, CD_DARKER_GREY);
    ctx.paint().unwrap();

    // Draw panels
    for panel in panels {
        draw_rectangle(ctx, panel.x, panel.y, panel.width, panel.height,
                      CD_LIGHTER_ORANGE, Some((0.0, 0.0, 0.0)));
    }

    // Draw panel labels
    draw_text(ctx, "Restart", panels[3].x, panels[3].y + 12.0, (0.0, 0.0, 0.0), 16.0);
    draw_text(ctx, "Exit", panels[4].x, panels[4].y + 12.0, (0.0, 0.0, 0.0), 16.0);

    // Floor indicator
    let floor_text = if state.cur_floor == 0 { "GF".to_string() } else { state.cur_floor.to_string() };
    draw_text(ctx, &floor_text, panels[0].x, panels[0].y + 11.0, (0.0, 0.0, 0.0), 16.0);

    // Draw elevator shaft and floors
    for i in (0..=6).rev() {
        let floor_y = 50.0 + (6 - i) as f64 * 90.0;

        // Draw floor background
        draw_rectangle(ctx, 195.0, floor_y + 40.0, 40.0, 40.0, 
                      (1.0, 1.0, 1.0), Some((0.5, 0.5, 0.5)));

        // Draw floor number
        let floor_num = if i == 0 { "GF".to_string() } else { i.to_string() };
        draw_text(ctx, &floor_num, 130.0, floor_y + 35.0, (1.0, 1.0, 1.0), 16.0);
    }

    // Elevator car position
    let elevator_y = 50.0 + (6 - state.cur_floor) as f64 * 90.0 + 40.0;

    // Draw elevator car
    draw_rectangle(ctx, 195.0, elevator_y, 35.0, 35.0, CD_MEDIUM_BLUE, None);

    // Draw doors
    let door_color = if state.door_open { CD_PALE_BLUE } else { CD_MEDIUM_BLUE };
    draw_rectangle(ctx, 175.0, elevator_y, 10.0, 35.0, door_color, None);
    draw_rectangle(ctx, 215.0, elevator_y, 10.0, 35.0, door_color, None);

    // Draw wait sign
    if state.wait_sign >= 0 {
        let wait_y = 50.0 + (6 - state.wait_sign) as f64 * 90.0 + 40.0;
        draw_diamond(ctx, 193.0, wait_y, 75.0, 75.0, (1.0, 1.0, 0.0), Some((0.0, 0.0, 0.0)));
        ctx.set_line_width(2.0);
        draw_text(ctx, "WAIT", 194.0, wait_y + 14.0, (0.0, 0.0, 0.0), 16.0);
        ctx.stroke().unwrap();
    }

    // Draw buttons
    for button in buttons {
        draw_circle(ctx, button.x, button.y, button.radius,
                   (0.75, 0.75, 0.75), Some((0.0, 0.0, 0.0)));
        ctx.stroke().unwrap();
        
        let font_size = if button.text.len() > 1 { 35.0 } else { 50.0 };
        let y_offset = if button.text.len() > 1 { 25.0 } else { 35.0 };
        draw_text(ctx, &button.text, button.x - 2.0, button.y + y_offset, (0.0, 0.0, 0.0), font_size);
        ctx.stroke().unwrap();
    }
}

// Process elevator actions
fn process_actions(state: Arc<Mutex<ElevatorState>>, drawing_area: &DrawingArea) {
    let state_clone = Arc::clone(&state);
    let drawing_area_weak = drawing_area.downgrade();
    
    thread::spawn(move || {
        loop {
            let action = {
                let mut state_guard = state_clone.lock().unwrap();
                if state_guard.action_count > 0 {
                    let action = state_guard.actions[0].clone();
                    state_guard.actions.rotate_left(1);
                    state_guard.actions[state_guard.action_count - 1] = String::new();
                    state_guard.action_count -= 1;
                    Some(action)
                } else {
                    None
                }
            };
            
            if let Some(action) = action {
                let mut state_guard = state_clone.lock().unwrap();
                
                match action.as_str() {
                    "GF" => {
                        if state_guard.cur_floor > 0 {
                            state_guard.cur_floor -= 1;
                            state_guard.door_open = false;
                        } else {
                            state_guard.door_open = true;
                        }
                    }
                    "1" | "2" | "3" | "4" | "5" | "6" => {
                        if let Ok(target_floor) = action.parse::<i32>() {
                            // Simulate movement floor by floor
                            while state_guard.cur_floor != target_floor {
                                if state_guard.cur_floor < target_floor {
                                    state_guard.cur_floor += 1;
                                } else {
                                    state_guard.cur_floor -= 1;
                                }
                                state_guard.door_open = false;
                                
                                // Trigger redraw
                                if let Some(drawing_area) = drawing_area_weak.upgrade() {
                                    glib::idle_add_local_once(move || {
                                        drawing_area.queue_draw();
                                    });
                                }
                                
                                drop(state_guard);
                                thread::sleep(Duration::from_millis(500));
                                state_guard = state_clone.lock().unwrap();
                                
                                // Check for wait sign
                                if state_guard.cur_floor == state_guard.wait_sign {
                                    state_guard.wait_sign = -1;
                                    state_guard.door_open = true;
                                    
                                    if let Some(drawing_area) = drawing_area_weak.upgrade() {
                                        glib::idle_add_local_once(move || {
                                            drawing_area.queue_draw();
                                        });
                                    }
                                    
                                    drop(state_guard);
                                    thread::sleep(Duration::from_millis(1500));
                                    state_guard = state_clone.lock().unwrap();
                                    
                                    state_guard.door_open = false;
                                    
                                    if let Some(drawing_area) = drawing_area_weak.upgrade() {
                                        glib::idle_add_local_once(move || {
                                            drawing_area.queue_draw();
                                        });
                                    }
                                    
                                    drop(state_guard);
                                    thread::sleep(Duration::from_millis(500));
                                    state_guard = state_clone.lock().unwrap();
                                }
                            }
                            state_guard.door_open = true;
                        }
                    }
                    "^" => {
                        if state_guard.cur_floor < 6 {
                            state_guard.cur_floor += 1;
                            state_guard.door_open = false;
                        }
                    }
                    "v" => {
                        if state_guard.cur_floor > 0 {
                            state_guard.cur_floor -= 1;
                            state_guard.door_open = false;
                        }
                    }
                    "><" => {
                        state_guard.door_open = !state_guard.door_open;
                        drop(state_guard);
                        thread::sleep(Duration::from_secs(1));
                        state_guard = state_clone.lock().unwrap();
                    }
                    _ => {}
                }
                
                // Trigger redraw
                if let Some(drawing_area) = drawing_area_weak.upgrade() {
                    glib::idle_add_local_once(move || {
                        drawing_area.queue_draw();
                    });
                }
            }
            
            thread::sleep(Duration::from_millis(100));
        }
    });
}

// Check and process button and panel clicks
fn handle_button_click(x: f64, y: f64, state: Arc<Mutex<ElevatorState>>, 
                      buttons: &[Button], panels: &[Panel]) -> bool {
    for button in buttons {
        let dist_sq = (x - button.x).powi(2) + (y - button.y).powi(2);
        if dist_sq <= button.radius.powi(2) {
            let mut state_guard = state.lock().unwrap();
            if state_guard.action_count < state_guard.actions.len() {
                state_guard.actions[state_guard.action_count] = button.text.clone();
                state_guard.action_count += 1;
            }
            return true;
        }
    }
    if x >= panels[3].x - panels[3].width && x <= panels[3].x + panels[3].width &&
       y >= panels[3].y - panels[3].height && y <= panels[3].y + panels[3].height {
        let mut state_guard = state.lock().unwrap();
        state_guard.new_game();
        return true;
    } else if x >= panels[4].x - panels[4].width && x <= panels[4].x + panels[4].width &&
              y >= panels[4].y - panels[4].height && y <= panels[4].y + panels[4].height {
        std::process::exit(0);
    }
    false
}

fn main() {
    let app = Application::builder()
        .application_id("com.example.elevator")
        .build();

    app.connect_activate(|app| {
        let window = ApplicationWindow::builder()
            .application(app)
            .title("Elevator Simulation")
            .default_width(WINDOW_WIDTH)
            .default_height(WINDOW_HEIGHT)
            .build();

        let drawing_area = DrawingArea::new();
        drawing_area.set_size_request(WINDOW_WIDTH, WINDOW_HEIGHT);

        let state = Arc::new(Mutex::new(ElevatorState::new()));
        {
            let mut state_guard = state.lock().unwrap();
            state_guard.new_game();
        }

        // Initialize panels and buttons
        let panels = vec![
            Panel::new(195.0, 30.0, 45.0, 12.0),     // indicator
            Panel::new(380.0, 150.0, 50.0, 90.0),    // up/down
            Panel::new(380.0, 465.0, 100.0, 210.0),  // main
            Panel::new(625.0, 330.0, 75.0, 25.0),    // restart
            Panel::new(625.0, 530.0, 75.0, 25.0),    // exit
        ];

        let buttons = vec![
            Button::new(380.0, 110.0, "^", 30.0),
            Button::new(380.0, 190.0, "v", 30.0),
            Button::new(335.0, 305.0, "5", 30.0),
            Button::new(420.0, 305.0, "6", 30.0),
            Button::new(335.0, 385.0, "3", 30.0),
            Button::new(420.0, 385.0, "4", 30.0),
            Button::new(335.0, 465.0, "1", 30.0),
            Button::new(420.0, 465.0, "2", 30.0),
            Button::new(380.0, 540.0, "GF", 30.0),
            Button::new(380.0, 630.0, "><", 30.0),
        ];

        let state_clone = Arc::clone(&state);
        let panels_clone = panels.clone();
        let buttons_clone = buttons.clone();
        
        drawing_area.set_draw_func(move |_, ctx, _, _| {
            let state_guard = state_clone.lock().unwrap();
            draw_elevator_scene(ctx, &state_guard, &panels_clone, &buttons_clone);
        });

        // Set up mouse click handling
        let gesture = GestureClick::new();
        let state_click = Arc::clone(&state);
        let panels_click = panels.clone();
        let buttons_click = buttons.clone();
        let drawing_area_click = drawing_area.clone();
        
        gesture.connect_pressed(move |_, _, x, y| {
            if handle_button_click(x, y, Arc::clone(&state_click), &buttons_click, &panels_click) {
                drawing_area_click.queue_draw();
            }
        });
        
        drawing_area.add_controller(gesture);

        // Start action processing thread
        process_actions(Arc::clone(&state), &drawing_area);

        window.set_child(Some(&drawing_area));
        window.present();
    });

    app.run();
}
