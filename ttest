struct PositType3{T<:Integer}
    numbits::UInt16
    es::UInt16
    bits::T
    PositType3(nb, ne, i) = new{typeof(i)}(UInt16(nb), UInt16(ne), i)
end

function PositType3(x::Real, numbits, es)
    tindex = Int(round(log2(numbits / 8))) + 1
    1 <= tindex <= 5 || error("Cannot create posit of bit size $numbits")
    typ = [UInt8, UInt16, UInt32, UInt64, UInt128][tindex]
    x == 0 && return zero(typ)
    x in [-Inf, Inf, NaN] && return typemax(typ) - typemax((signed(typemax(typ))))
    s = x < 0
    xabs = abs(x)
    useed = 2^es
    expo = Int(floor(log2(xabs)))     # x can be written as 1.bits.. * 2^expo
    expneg = expo < 0
    k = expneg ? -(expo - useed + 1) รท useed : expo รท useed
    e = expneg ? k * useed + expo : expo - k * useed
    r = expneg ? k + 1 : -k
    fsize = numbits - 1 - r - 1 - es
    f = UInt(round((x/(2^expo) - 1) * 2^fsize))
    pabs = typ(f) | typ(e << fsize) | typ((expneg ? 2^(r + 1) - 1 : 0) << (fsize + es))
    return PositType3(numbits, es, s ? -pabs : pabs)
end

@show pi, PositType3(pi, 8, 2), Float64(Rational(PositType3(pi, 8, 2)))

@show BigFloat(pi), PositType3(BigFloat(pi), 128, 2), Float64(Rational(PositType3(pi, 8, 2)))



