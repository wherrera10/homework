const multiplier = [1, 3, 5, 7, 11, 3*5, 3*7, 3*11, 5*7, 5*11, 7*11, 3*5*7, 3*5*11, 3*7*11, 5*7*11, 3*5*7*11]

function square_form_factor(n::T) where T <: Interger
    #uint64_t D, Po, P, Pprev, Q, Qprev, q, b, r, s;
    #uint32_t L, B, i;
    s = isqrt(n)
    s * s == n && return s
    for k in multiplier
        n > typemax(T) / k && break
        D = k * n
        Po = Pprev = P = isqrt(D)
        Qprev = 1
        Q = D - Po * Po
        L = T(2 * sqrt(2 * s))
        B = 3 * L
        for i in 2:B-1
            b = T(floor((Po + P) / Q)))
            P = b * Q - P
            q = Q
            Q = Qprev + b * (Pprev - P)
            r = isqrt(Q)
            iseven(i) && r * r == Q && break
            Qprev, Pprev = q, p
        end
        i < B && break
        b = div((Po - P), r)
        Pprev = P = b * r + P
        Qprev = r
        Q = div(D - Pprev * Pprev, Qprev)
        i = 0
        while true
            b = div(Po + P, Q)
            Pprev = P
            P = b * Q - P
            q = Q
            Q = Qprev + b * (Pprev - P)
            Qprev = q
            i += 1
            P == Pprev && break
        end
        r = gcd(N, Qprev)
        if r != 1 && r != N
            return r
        end
    end
    return 0
end


