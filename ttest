using Combinatorics
using Primes

function primetriangle(nrows::Integer)
    nrows < 2 && error("number of rows requested must be > 1")
    pmask = primesmask(2 * (nrows + 1))
    println("  1  2")
    for r in 2:nrows
        for p in permutations(2:r)
            if pmask[p[end] + r + 1] && pmask[p[begin] + 1] && all(i -> pmask[p[i] + p[i+1]], 1:r-2)
                println("  1" * prod([lpad(n, 3) for n in p]) * lpad(r + 1, 3))
                break
            end
        end
    end
end

primetriangle(20)




using Combinatorics
using Primes

function primetriangle(nrows::Integer)
    nrows < 2 && error("number of rows requested must be > 1")
    pmask = primesmask(2 * (nrows + 1))
    counts = zeros(Int, nrows)
    counts[begin] = 1
    println("  1  2")
    for r in 2:nrows, p in permutations(2:r)
        if pmask[p[end] + row + 1] && pmask[p[begin] + 1] && all(i -> pmask[p[i] + p[i+1]], 1:row-2)
            counts[row] == 0 && println("  1" * prod([lpad(n, 3) for n in p]) * lpad(row + 1, 3))
            counts[row] += 1
        end
    end
    println("\n", counts)
end

primetriangle(18)
