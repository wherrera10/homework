using Combinatorics
using Plots
using Primes
 
g(n) = iseven(n) ? count(p -> all(isprime, p), partitions(n, 2)) : error("n must be even")
 
println("The first 100 G numbers are: ")
 
foreach(p -> print(lpad(p[2], 4), p[1] % 10 == 0 ? "\n" : ""), map(g, 4:2:202) |> enumerate)
 
println("\nThe value of G(1000000) is ", g(1_000_000))
 
x = collect(2:2002)
y = map(g, 2x)
scatter(x, y, markerstrokewidth = 0, color = ["red", "blue", "green"][mod1.(x, 3)])

#=
from cvxpy import Problem, Variable, Minimize

def diagat(mat, n, i, j):
    """ return the diagonal containing mat[i][j] with mat an n x n square natrix"""
    return [mat[i + k][j + k] for k in range(-n, n) if 0 <= i + k < n and 0 <= j + k < n]

def diag90at(mat, n, i, j):
    """ return the diagonal orthogonal to the regular diagonal containing mat[i][j] """
    return [mat[i - k][j + k] for k in range(-n, n) if 0 <= i - k < n and 0 <= j + k < n]

N = 10 
a = Variable((N, N), boolean=True)


i, j = 2, 3

v = diagat(a, N, i, j)

print(v)


=#
