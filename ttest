
def kmp_table(W):
    """
    input:
        an array of characters, W (the word to be analyzed)
    output:
        an array of integers, T (the table to be filled)

    define variables:
        an integer, pos ← 1 (the current position we are computing in T)
        an integer, cnd ← 0 (the zero-based index in W of the next character of the current candidate substring)
    """
    T = [-1] x len(W)
    pos = 1
    cnd = 0
    while pos < len(W):
        if W[pos] == W[cnd]:
            T[pos] = T[cnd]
        else:
            T[pos] = cnd
            while cnd >= 0 and W[pos] != W[cnd]:
                cnd = T[cnd]
        pos += 1
	cnd += 1

    T[pos] = cnd # (only needed when all word occurrences are searched)
    return T


def kmp_search(S, W):
"""
    input:
        an array of characters, S (the text to be searched)
        an array of characters, W (the word sought)
    output:
        an array of integers, P (positions in S at which W is found)
        an integer, nP (number of positions)

    define variables:
        an integer, j ← 0 (the position of the current character in S)
        an integer, k ← 0 (the position of the current character in W)
        an array of integers, T (the table, computed elsewhere)
"""
    nP = 0
    P = {}
    T = kmp_table(W)
    
    while j < len(S):
        if W[k] == S[j]:
            j += 1
            k += 1
            if k = len(W):
                # (occurrence found, if only first occurrence is needed, m ← j - k  may be returned here)
                P[nP] = j - k
		nP += 1
                k = T[k] # (T[length(W)] can't be -1)
        else:
            k = T[k]
            if k < 0:
                j += 1
                k += 1
    
    return P, nP
    
