using Random, Ncurses_jll

const KeyUp, KeyDown, KeyLeft, KeyRight = 259, 258, 260, 261
const Mx = 69 # No of columns (1..Mx), must be odd.
const My = 31 # No of rows (1..My), must be odd.
const Treasure = '$'
const TreasureDb = 3 # How many $ signs will be placed.
const Way = ' '
const Wall = 'X'
const Doors = 20 # No of doors.
const DoorCenter = 'o'
const DoorWingVertical = '|'
const DoorWingHorizontal = '-'
const Hero = '@'
const DeadHero = '+'
const NumberOfBombs = 5
const Bomb = 'b'
const NumberOfMonsters = 20
const Monster = '*'
const WeakMonster = '.'
const MonsterWeaknessProbability = 25
    # The higher the above number, the lower the chance that a strong monster will become weak.
const MonsterIntensifiesProbability = 5
    # The higher the number above, the lower the chance that a weak monster will get stronger.
const HelpText = """
  Maze game.

The object of the game is to get all the treasures. The symbol of the treasure is the \$ sign.
Help (display this text): press ? or h
Exit: press Esc or q
You can detonate a bomb by pressing b, but only as long as your bomb remains.
A bomb destroys every wall around the player (the outermost, framing of the maze
except for its walls), but it won't kill monsters.
The bomb does not destroy diagonally, only vertically and horizontally.
The bomb will not destroy the doors or the treasure.
You can also find bombs in the maze, represented by the letter b. If you step on them,
you got the bomb with it, that is, the number of your bombs increases, for later use.
The game ends when you have acquired all the treasures.
The maze has not only walls but also revolving doors.
The revolving door, if horizontal, looks like this: -o-
If vertical, like this:
 |
 o
 |
The center of the revolving door is represented by the character o, the wings by the line.
The revolving door can be rotated if you take your wing in the right direction with your character,
and if nothing stands in the way of rotation.
The player is represented by @ in the game, and his starting point is always in the lower left corner.
There is a possibility of a little cheating in the game: each press of the letter c is one increases
the amount of your bombs.
"""

@enum Direction Left Right Up Down

const Position = NamedTuple{(:x, :y)}

mutable struct Game
    grid::Matrix{Char}
    scoords::Vector{Position}
    showhelp::Bool
    terminate::Bool
    treasurecounter::Int
    bombs::Int
    x::Int
    y::Int
end

const NoPosition = Position((0, 0))
const Dy = [-1, 1, 0, 0]
const Dx = [0, 0, -1, 1]
const gamelock = Threads.SpinLock()

""" Game constructor for game initialization """
function Game()
    grid = fill(Way, My, Mx)
    grid[[begin, end], begin:end] .= Wall
    grid[begin+1:end-1, [begin, end]] .= Wall
    colflags = [isodd(n) for n in 1:Mx]
    rowflags = [isodd(n) for n in 1:My]

    while any(colflags) || any(rowflags)
        direction = rand([Left, Right, Up,  Down])
        j = rand(1:(direction in [Left, Right] ? My : Mx)) รท 2 * 2 + 1 # if even, add one
        if direction == Left && rowflags[j]
            for r in 1:Mx-1
                if grid[j, r] != Wall && grid[j, r+1] != Wall
                    grid[j, r] = Wall
                end
            end
            rowflags[j] = false
        elseif direction == Right && rowflags[j]
            for r in Mx:-1:3
                if grid[j, r-1] != Wall && grid[j, r-2] != Wall
                    grid[j, r-1] = Wall
                end
            end
            rowflags[j] = false
        elseif direction == Up && colflags[j]
            for c in My:-1:3
                if grid[c-1, j] != Wall && grid[c-2, j] != Wall
                    grid[c-1, j] = Wall
                end
            end
            colflags[j] = false
        elseif direction == Down && colflags[j]
            for c in 1:My-1
                if grid[c, j] != Wall && grid[c+1, j] != Wall
                    grid[c, j] = Wall
                end
            end
            colflags[j] = false
        end
    end
    doorsplaced = 0
    while doorsplaced < Doors
        x = rand(3:Mx-2)
        y = rand(3:My-2)
        if grid[y, x] != Way && grid[y-1, x-1] == Way && grid[y-1, x+1] == Way &&
           grid[y+1, x-1] == Way && grid[y+1, x+1] == Way # corners free?
            if grid[y-1, x] == Wall && grid[y-2, x] == Wall && grid[y+1, x] == Wall &&
               grid[y+2, x] == Wall && grid[y, x-1] == Way && grid[y, x+1] == Way
                grid[y, x] = DoorCenter
                grid[y-1, x] = DoorWingVertical
                grid[y+1, x] = DoorWingVertical
                doorsplaced += 1
            elseif grid[y, x-1] == Wall && grid[y, x-2] == Wall && grid[y, x+1] == Wall &&
               grid[y, x+2] == Wall && grid[y+1, x] == Way && grid[y-1, x] == Way
                grid[y, x] = DoorCenter
                grid[y, x-1] = DoorWingHorizontal
                grid[y, x+1] = DoorWingHorizontal
                doorsplaced += 1
            end
        end
    end
    # note all monsters start as weak (weak ones count == NumberofMonsters)
    scoords = Position[]
    stuff = [(TreasureDb, Treasure), (NumberOfBombs, Bomb),(NumberOfMonsters, WeakMonster)]
    for (n, what) in stuff
        iterations = 1
        cnt = n
        while cnt > 0
            x = rand(1:Mx)
            y = rand(1:My) 
            if grid[y, x] == Way
                grid[y, x] = what
            end
            what == WeakMonster && push!(scoords, Position((x, y)))
            cnt -= 1
            iterations += 1
            @assert iterations <= 10_000 # (sanity check)
        end
    end
    grid[end - 1, begin] = Hero
    return Game(grid, scoords, false, false, 0, 3, 2, My - 1)
end

initscr() = ccall(("initscr", libncurses), Cvoid, ())
noecho() = ccall(("noecho", libncurses), Cvoid, ())
erase() = ccall(("erase", libncurses), Cvoid, ())
addstr(s) = ccall(("addstr", libncurses), Cvoid, (Cstring,), s)
getch() = ccall(("getch", libncurses), Cint, ())
move(x, y) = ccall(("move", libncurses), Cvoid, (Cint, Cint,), x, y)
refresh() = ccall(("refresh", libncurses), Cvoid, ())
cbreak() = ccall(("cbreak", libncurses), Cvoid, ())

function draw!(game)
    initscr()
    noecho()
    while true
        lock(gamelock)
        if game.showhelp
            erase()
            addstr(HelpText)
            getch()
            erase()
            game.showhelp = false
        end
        erase()
        move(0, 0)
        for row in eachrow(game.grid)
            addstr(join(row) * '\n')
        end
        addstr("\n\nCollected treasures = $(game.treasureCounter)     Bombs = $(game.bombs)\n")
        refresh()
        game.terminate && break
        release(gamelock)
        sleep(0.2)
    end
end

function monsterstepfinder(game, sx, sy)
    result = NoPosition
    for i in shuffle([0, 1, 2, 3])
        nx = sx + Dx[i]
        ny = sy + Dy[i]
        if ny in 1:My && nx in 1:Mx && game.grid[ny, nx] in [Way, Hero]
            result = Position((nx, ny))
        end
    end
    return result
end

function monstermove!(game)
    while true
        lock(gamelock)
        active = rand(1:NumberOfMonsters)
        (sx, sy) = game.scoords[active]
        if sx != 0
            ch = game.grid[sy, sx]
            if ch == Monster
                if rand(1:MonsterWeaknessProbability) == 1
                    game.grid[sy, sx] = WeakMonster
                else
                    monster = game.monsterStepFinder(sx, sy)
                    if monster != NoPosition
                        if game.grid[monster.y, monster.x] == Hero
                            game.grid[monster.y, monster.x] = DeadHero
                            game.terminate = true
                            unlock(gamelock)
                            break
                        end
                    end
                    game.grid[sy, sx] = Way
                    game.grid[monster.y, monster.x] = Monster
                    game.scoords[active] = monster
                end
            elseif ch == WeakMonster
                if rand(1:MonsterIntensifiesProbability) == 1
                    game.grid[sy, sx] = Monster
                else
                    monster = monsterstepfinder(game, sx, sy)
                    if monster != NoPosition
                        if game.grid[monster.y, monster.x] != Hero
                            game.grid[monster.y, monster.x] = WeakMonster
                            game.scoords[active] = monster
                            unlock(gamelock)
                            break
                        else
                            game.scoords[active] = NoPosition
                        end
                    end
                end
            end
        end
        unlock(gamelock)
        sleep(0.1)
   end
end

function rotatedoor!(game, nx, ny)
    for i in 1:4
        wy = Dy[i-1]
        wx = Dx[i-1]
        cy = ny + wy
        cx = nx + wx
        if game.grid[cy, cx] == DoorCenter
            if game.grid[cy-1, cx-1] == Way &&
              game.grid[cy-1, cx+1] == Way &&
              game.grid[cy+1, cx-1] == Way &&
              game.grid[cy+1, cx+1] == Way  # four corners empty
                py = Dy[end-i]
                px = Dx[end-i]
                if game.grid[cy+py, cx+px] == Way &&
                  game.grid[cy-py, cx-px] == Way  # swung door empty
                    door = game.grid[ny, nx]
                    flip = door == DoorWingVertical ? DoorWingHorizontal : DoorWingVertical
                    game.grid[cy+py, cx+px] = flip
                    game.grid[cy-py, cx-px] = flip
                    game.grid[cy+wy, cx+wx] = Way
                    game.grid[cy-wy, cx-wx] = Way
                end
            end
            break
        end
    end
end

function keyboard(game)
    while true
        key = getch()
        sleep(10)
        lock(gamelock)
        if key in ['\e', 'q']
            game.terminate = true
            unlock(gamelock)
            break
        elseif key == 'b'
            if game.bombs != 0
                game.bombs -= 1
                for i in 0:3
                    nx = game.x + Dx[i]
                    ny = game.y + Dy[i]
                    if ny in 2:My-1 && nx in 2:Mx-1 && game.grid[ny, nx] == Wall
                        game.grid[ny, nx] = Way
                    end
                end
            end
        elseif key == 'c'
          game.bombs += 1
        elseif key in ['?', 'h']
            game.showhelp = true
        else
            chindex = findfirst(==(key), [KeyUp, Keydown, KeyLeft, KeyRight])
            if chindex != nothing
                nx = game.x + Dx[chindex]
                ny = game.y + Dy[chindex]
                if ny in 2:My-1 && nx in 2:Mx-1
                    ch = game.grid[ny, nx]
                    if ch in [DoorWingVertical, DoorWingHorizontal]
                            game.grid[game.y, game.x] = Way   # (temp. "ghost" him)
                            rotatedoor!(game, nx, ny)
                            game.grid[game.y, game.x] = Hero
                            ch = game.grid[ny, nx]            # (maybe unaltered)
                    elseif ch == Monster
                        game.grid[game.y, game.x] = Way
                        game.grid[ny, nx] = DeadHero
                        game.y = ny
                        game.x = nx
                        game.terminate = true
                        unlock(gamelock)
                        break
                    elseif ch == Treasure
                        game.treasurecounter += 1
                          ch = Way
                        if game.treasurecounter == TreasureDb
                            game.grid[game.y, game.x] = Way
                            game.grid[ny, nx] = Hero
                            game.y = ny
                            game.x = nx
                            game.terminate = true
                            unlock(gamelock)
                            break
                        end
                    elseif ch == Bomb
                        game.bombs += 1
                        ch = Way
                    end
                    if ch in [Way, WeakMonster]
                        game.grid[game.y, game.x] = Way
                        game.grid[ny, nx] = Hero
                        game.y = ny
                        game.x = nx
                    end
                end
            end
        end
        unlock(gamelock)
        sleep(0.01)
    end
end

function play()
    initscr()
    noecho()
    cbreak()
    game = Game()
    @async draw(game)
    @async monstermove!(game)
    @async keyboard(game)
    while !game.terminate
        sleep(0.2)
    end
    if game.treasurecounter == TreasureDb
        addstr("\nYOU WON! Congratulations!\n")
    elseif game.grid[game.y, game.x] == DeadHero
        addstr("\nYOU PERISHED!\n")
    end
    refresh()
end

play()

