    using BenchmarkTools

    function bubblesort(arr::T) where T <: Vector
        function recursebubble(a::T, remaining::T, sorted::T)
            if length(a) < 2
                if isempty(remaining)
                    return [a ; sorted]
                else
                    x = popfirst!(a)
                    return recursebubble(remaining, T(), [x ; sorted])
                end
            else
                x = popfirst!(a)
                y = popfirst!(a)
                if x > y
                    pushfirst!(remaining, y)
                    pushfirst!(a, x)
                else
                    pushfirst!(remaining, x)
                    pushfirst!(a, y)
                end
                return recursebubble(a, remaining, sorted)
            end
        end
        recursebubble(copy(arr), T(), T())
    end

    randarray = rand(Int8, 100)

    println("Recursive bubble: ", bubblesort(randarray))
    @btime bubblesort(randarray)

    println("Base sort: ", sort(randarray))
    @btime sort(randarray)


function insertionsort(arr::T) where T <: Vector
    function insert(x, a)
        if isempty(a)
            push!(a, x)
        else
            y = popfirst!(a)
            if x <= y
                pushfirst!(a, y)
                pushfirst!(a, x)
            else
                a = insert(a, x)
                pushfirst!(a, y)
            end
        end
        return a
    end
    function recursiveinsertion(a::T)
        isempty(a) && return a
        x = popfirst!(a)
        return insert(recursiveinsertion(a), x)
    end
    return recursiveinsertion(copy(a))
 end
 
