#=

Two common convention for naming of computer program variables are <em>Snake Case</em> and <em>Camel case</em>.

Snake case variables are generally all lower case, with an underscore between words in the variable, as in `snake_case_variable`.
Camle case variables are generally lower case first (except in Pascal or with class names in many other languages), with an underscore
between words in the variable, as in `snakeCaseVariable`.

Task:

Write two functions, one to change snake case to camel case and one to change camel case to snake case. Show the results on:

"snakeCase", "snake_case", "variable_10_case", variable10Case

Extra credit task:  Generalize the function enough to change to either snake case or camel case the following,
assuming that '-' or whitespace is to be replaced as a snake-case style separator as '_' is:

"É›rgo rE tHis", "hurry-up-joe!", c://my-docs/happy_Flag-Day/12.doc"

function camelize(text) {
    text = text.replace(/[-_\s.]+(.)?/g, (_, c) => c ? c.toUpperCase() : '');
    return text.substr(0, 1).toLowerCase() + text.substr(1);
}
Case-changing characters:

hyphen -
underscore _
period .
space

import re

REG = r"(.*?)_([a-zA-Z])"

def camel(match):
    return match.group(1) + match.group(2).upper()

def camel_upper(match):
    return match.group(1)[0].upper() + match.group(1)[1:] + match.group(2).upper()

words = """add
matrix_add
diagonal_matrix_add
pseudo_inverse""".splitlines()

results = [re.sub(REG, camel, w, 0) for w in words]
print(results)
# Output:
# ['add', 'matrixAdd', 'diagonalMatrixAdd', 'pseudoInverse']

=#


function _decamelize(cur_string::AbstractString)
  capital_letters = collect(m.match for m in eachmatch(r"[A-Z]+", cur_string))
  capital_letters = map(x -> downcase(x), capital_letters)

  lowercase_phrases = split(cur_string, r"([A-Z]+)")

  cur_array = vcat(
    map(
      x -> join(x, "_"),
      [zip(lowercase_phrases, capital_letters)...]
    )...
  )

  cur_string = join(cur_array)

  if length(lowercase_phrases) > length(capital_letters)
    cur_string *= lowercase_phrases[end]
  end

  if length(lowercase_phrases) < length(capital_letters)
    error("Improperly handled string on decamelize: $cur_string")
  end

  ( startswith(cur_string, "_") ) && ( cur_string = cur_string[2:end] )
  ( startswith(cur_string, "-") ) && ( cur_string = cur_string[2:end] )

  cur_string
end


function pascalcase(cur_string::AbstractString)
  replace(
    titlecase(_defaultcase(cur_string)),
    " " => ""
  )
end

function camelcase(cur_string::AbstractString)
  lowercasefirst(pascalcase(cur_string))
end

function camelize(cur_string::AbstractString)
  cur_string = classify(cur_string)

  cur_string = join(map(x -> lowercasefirst(x), split(cur_string, "/")), "/")

  cur_string
end

function classify(cur_string::AbstractString)
  cur_string = capitalize(cur_string)

  cur_string = join(map(x -> uppercasefirst(x), split(cur_string, r"[- _]")))

  cur_string
end




       
