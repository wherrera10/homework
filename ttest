
class AdditionChains:
    def __init__(self):
        ''' memoization for knuth_path '''
        self.pat, self.lvl = {1: 0}, [[1]]

    def knuth_path(self, n):
        if n < 1:
            return []
        while not n in self.pat:
            q = []
            for x in self.lvl[0]:
                for y in self.knuth_path(x):
                    if not x + y in self.pat:
                        self.pat[x + y] = x
                        q.append(x + y)

            self.lvl[0] = q

        returnpath = self.knuth_path(self.pat[n])
        returnpath.append(n)
        return returnpath


def pow(x, chain):
    p, products = 0, {0: 1, 1: x}
    for i in chain:
        products[i] = products[p] * products[i - p]
        p = i
    return products[chain[-1]]
    
