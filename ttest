import HiGHS
using JuMP
using LinearAlgebra


function knightsminimum(N)
     knightdeltas = [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]

    model = Model(HiGHS.Optimizer)

    # to simplify the constraints, embed the board of size N inside a board of size n + 4
    @variable(model, x[1:N+4, 1:N+4], Bin)

    @constraint(model, x[:, 1:2] .== 0)
    @constraint(model, x[1:2, :] .== 0)
    @constraint(model, x[:, N-1:N] .== 0)
    @constraint(model, x[N-1:N, :] .== 0)


    for i in 3:N-2, j in 3:N-2
        @constraint(model, x[i, j] + sum(x[i, j] .+ knightdeltas) >= 1)
        @constraint(model, x[i, j] * sum(x[i, j] .+ knightdeltas) == 0)
    end

    @objective(model, Min, sum(x))
    optimize!(model)

    solution = round.(Int, value.(x))
    minresult = sum(solution)
    matrixtext = ""
    for i in 1:N, j in 1:N
        matrixtext *= lpad(x[i, j], 3) * j == N ? "\n" : " "
    end
    return minresult, matrixtext
end


