
           julia> fpow(f, n::UInt16) = x -> f(x)^n
           fpow (generic function with 1 method)

           julia> sinpow(x, n) = fpow(sin, n)(x)
           sinpow (generic function with 1 method)

           julia> sinpow(pi, 5)
           ERROR: MethodError: no method matching fpow(::typeof(sin), ::Int64)
           Closest candidates are:
             fpow(::Any, ::UInt16) at REPL[13]:1
           Stacktrace:
            [1] sinpow(x::Irrational{:π}, n::Int64)
              @ Main .\REPL[14]:1
            [2] top-level scope
              @ REPL[15]:1

           julia> sinpow(pi, 0x5)
           ERROR: MethodError: no method matching fpow(::typeof(sin), ::UInt8)
           Closest candidates are:
             fpow(::Any, ::UInt16) at REPL[13]:1
           Stacktrace:
            [1] sinpow(x::Irrational{:π}, n::UInt8)
              @ Main .\REPL[14]:1
            [2] top-level scope
              @ REPL[16]:1

           julia> sinpow(pi, 0x005)
           0.0


julia> using LinearAlgebra

julia> function testsvd()
           rows, cols = [parse(Int, s) for s in split(readline())]
           arr = zeros(rows, cols)
           for row in 1:rows
               arr[row, :] .= [tryparse(Float64, s) for s in split(readline())]
           end
           display(svd(arr))
       end
testsvd (generic function with 1 method)

julia> testsvd()
2 2
3 0
4.5
SVD{Float64, Float64, Matrix{Float64}, Vector{Float64}}
U factor:
2×2 Matrix{Float64}:
 -0.346946  -0.937885
 -0.937885   0.346946
singular values:
2-element Vector{Float64}:
 6.74492216626026
 2.0015056760076915
Vt factor:
2×2 Matrix{Float64}:
 -0.780042  -0.625727
 -0.625727   0.780042
