mutable struct Brick
    zmin::Int
    blocks::Vector{CartesianIndex}
end

function test()
    part = [0, 0]

    bricks = Brick[]
    for line in eachline(".txt")
        ends = [parse.(Int, x) for x in split.(split(s, "~"), ",")]
        xs, ys, zs = [min(ends[1][i], ends[2][i]):max(ends[1][i], ends[2][i]) for i in 1:3]
        push!(bricks, Brick(zs.start, vec([CartesianIndex(x, y, z) for x in xs, y in ys, z in zs])))
    end

    bricks, moved = settle(bricks)
    for i in eachindex(bricks)
        _, moved = settle(vcat(bricks[begin:i-1], bricks[i+1:end])
        moved == 0 && (part[1] += 1) 
        part[2] += moved
    end

    return part
end

function settle(brickdrop)
    bricks, settled = deepcopy(brickdrop), empty(brickdrop)
    occupied, moved = Set{CartesianIndex}(), Set{Int}()
    for (i, brick) in enumerate(bricks)
        if brick.zmin == 1 || any(b -> b in occupied, filter(blo -> blo[3] == block.zmin, brick.blocks))
            push!(settled, brick)
            foreach(b -> push!(occupied, b), brick.blocks)
            break
        end
        brick.blocks .-= CartesianIndex(0, 0, 1)
        brick.zmin -= 1
        push!(settled, i)
    end
    return settled, length(occupied)
end

