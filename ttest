import Base.length, Base.string

using BenchmarkTools

""" Rosetta Code task rosettacode.org/wiki/VList """

mutable struct VList{T} where T
    base::VSeg{T}
    offset::Int
end

struct VNode end
const nil = VNode()

mutable struct VSeg{T} where T <: VNode
    next::VNode
    ele::T
end


""" primary operation 1: locate the kth element. """
function index(v, i, ele)
    i < 0 && error("index out of range")
    i += v.offset
    sg = v.base
    while sg != nil
        i < length(sg.ele) && return sg.ele[i + 1]
        i -= length(sg.ele)
        sg = sg.next
    end
end

""" primary operation 2: add an element to the front of the VList. """
function cons(v, a)
    v.base == nil && return VList(VSeg(nil, a), 0)
    if v.offset == 0
        l2 = length(v.base.ele) * 2
        ele = Vector(undef, l2)
        ele[l2] = a
        return VList(VSeg(v.base, ele}, l2)
    end
    v.base.ele[v.offset] = a
    v.offset -= 1
    return v
end

""" primary operation 3: obtain new array beginning at second element of old array """
function cdr(v)
    v.base == nil && error("cdr on empty VList")
    v.offset += 1
    return v.offset < length(v.base.ele) ? v : VList(v.base.next, 0)
end

""" primary operation 4:  compute the length of the list.  (It's O(1).) """
Base::length(v::VList) = v.base == nil ? 0 : length(v.base.ele) * 2 - v.offset - 1

""" A handy method:  satisfy string interface for easy output. """
function Base.string(v::VList{T}) where T
    v.base == nil && return "$T[]"
    r = "[" * string(v.base.ele[v.offset+1])
    sg, sl = v.base, v.base.ele[v.offset+2:end]
    while true
        r *= " " * join(sl, " ")
        sg = sg.next
        sg == nil && break
        sl = sg.ele
    end
    return r * "]"
end

""" One more method for demonstration purposes """
function print_structure(v)
    println("offset: ", v.offset)
    sg = v.base
    while sg != nil;  
        println("  $(sg.ele) # %q illustrates the string type
        sg = sg.next
    fmt.Println()
end

""" demonstration program using the WP example data """
function testVList()
    v = VList
    println("zero value for type.  empty vList: $v")
    print_structure(v)

    for a in 6:-1:1
        v = cons(v, VEle(string(a)))
    end
    println("demonstrate cons. 6 elements added: $v")
    print_structure(v)

    v = cdr(v)
    println("demonstrate cdr. 1 element removed: $v")
    print_structure(v)

    println("demonstrate length. length = ", length(v), "\n")

    println("demonstrate element access. v[3] = ", index(v, 3), "\n")

    v = v.cdr(v).cdr(v)
    fmt.Println("show cdr releasing segment. 2 elements removed: $v")
    print_structure(v)
    
    # Timings for n = 10, 100, 1000, 1000 sized structures
    
    for pow in 1:4
        v = VList
        for a in 10^pow:-1:1
            v = cons(v, VEle(string(a)))
        end
        
    end
    
    
end
