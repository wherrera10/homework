using BenchmarkTools

using Graphs

const DIR = "C:/Users/wherr/OneDrive/Documents/Julia Programs/aoc_2018"

mutable struct Unit15
    x::Int
    y::Int
    hp::Int
    attack::Int
    is_elf::Bool
end
lt15(a, b) = a.x == b.x ? a.y < b.y : a.x < b.x
function day15()
	part = [0, 0]
    directions = [[-1, 0], [0, 1], [1, 0], [0, -1]]

    grid = stack([collect(line) for line in readlines("$DIR/day15.txt")], dims = 1)
    nv = count(c -> grid[c] != '#', CartesianIndices(grid))
    g = SimpleGraph(nv)
    rows, cols = size(grid)

    units = Unit15[]
    tiles = Vector{Int}[]
    for x in 1:rows
        for y in 1:cols
            grid[x, y] == '#' && continue
            if grid[x, y] == 'E'
                push!(units, Unit15(x, y, 200, 3, true))
            elseif grid[x, y] == 'G'
                push!(units, Unit15(x, y, 200, 3, false))
            end
            c = [x, y]
            i = findfirst(==(c), tiles)
            if isnothing(i)
                push!(tiles, c)
                v1 = length(tiles)
            else
                v1 = i
            end
            for d in directions
                x2, y2 = x + d[1], y + d[2]
                c = [x2, y2]
                i = findfirst(==(c), tiles)
                if isnothing(i)
                    push!(tiles, c)
                    v2 = length(tiles)
                else
                    v2 = i
                end
                if !has_edge(g, v1, v2)
                    add_edge!(g, v1, v2)
                    add_edge!(g, v2, v1)
                end
            end
        end
    end
    fw = floyd_warshall_shortest_paths(g)
    for rnd in 1:typemax(Int32)
        game_over = false
        sort!(units, lt = lt15)
        for u in units
            u.hp <= 0 && continue
            targets = filter(ut -> ut.hp > 0 && ut.is_elf != u.is_elf, units)
            if isempty(targets)
                game_over = true
                break
            end
            adj = [[u.x + d[1], u.y + d[2]] for d in directions]
            ta = filter([t.x, t.y] ∈ adj, targets)
            if !isempty(ta)
                sort!(ta, lt = (a, b) -> a.hp == b.hp ? (a.x == b.x ? a.y < b.y : a.x < b.x) : a.hp < b.hp)
                ta[begin].hp -= u.attack
                continue
            end
            t_adj = Vector{Int}[]
            for t in targets
                append!(t_adj, [[t.x + d[1], t.y + d[2]] for d in directions if grid[t.x + d[1], t.y +d[2]] ∉ ['#', 'E', 'G']])
            end
            # find all shortest paths from u to each in t_adj
            for t in t_adj
                paths = collect(enumerate_paths(fw, u, t))

            
                

	return part
end

#@btime day15()

@show day15() # 
