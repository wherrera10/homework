const a = [1, 2, 3]
push(a, 4; a[2] = 0; # these change a's contents but not what a is (a reference to the array)

In Julia, a struct declared as a struct is immutable in its contents:

struct S
    x::Int
    a::Vector{Int}
end

s = S(5, [3, 6])

s.x = 2 # ERROR
s.a[1] = 2 # Not an error!

a struct declared as mutable is fully mutable:

mutable struct SM
    x::Int
    a::Vector{Int}
end

s = SM(5, [3, 6])

s.x = 2 # Not an error
s.a[1] = 2 # Not an error


In Julia, a variable declared in global scope (outside of a function) can be changed in global scope
without any issue (although handling of global variables is done with extra bookeeping and may be slow).
However, such a variable can only be read inside a function. Attempts to change such a variable in a function
result in an "undeclared variable" error unless the variable is declared within the function with the global
keyword:
