using Base.Iterators: product

# Define an edge case for the grid
const WALL = '#'
const SPACE = ' '

# Function to get the neighbors of a given cell
function get_neighbors(pos, grid)
    neighbors = []
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Right, Down, Left, Up
    
    for (dx, dy) in directions
        new_x = pos[1] + dx
        new_y = pos[2] + dy
        
        # Check boundaries and whether the cell is an empty space
        if new_x >= 1 && new_x <= size(grid, 1) && new_y >= 1 && new_y <= size(grid, 2)
            if grid[new_x, new_y] == SPACE
                push!(neighbors, (new_x, new_y))
            end
        end
    end
    return neighbors
end

# Dijkstra's Algorithm function
function dijkstra(grid, start, goal)
    rows, cols = size(grid)
    distances = Dict{Tuple{Int, Int}, Int}()
    previous = Dict{Tuple{Int, Int}, Union{Tuple{Int, Int}, Nothing}}()
    unvisited = Set{Tuple{Int, Int}}()
    
    # Initialize distances and unvisited set
    for (x, y) in product(1:rows, 1:cols)
        if grid[x, y] == SPACE
            distances[(x, y)] = typemax(Int)  # Infinity
            push!(unvisited, (x, y))
        end
    end
    distances[start] = 0
    
    while !isempty(unvisited)
        # Get the closest unvisited node
        current = argmin([distances[key] for key in unvisited])
        current_pos = unvisited[current]
        
        # If we reach the goal, reconstruct the path
        if current_pos == goal
            path = []
            while current_pos !== nothing
                push!(path, current_pos)
                current_pos = previous[current_pos]
            end
            return reverse(path)
        end
        
        # Remove the current node from unvisited
        delete!(unvisited, current_pos)
        
        for neighbor in get_neighbors(current_pos, grid)
            alt = distances[current_pos] + 1  # Each edge has weight of 1
            if alt < distances[neighbor]
                distances[neighbor] = alt
                previous[neighbor] = current_pos
            end
        end
    end
    
    return []  # Return an empty array if no path is found
end

# Example grid
grid = [
    '#', '#', '#', '#', '#', '#', '#',
    '#', ' ', ' ', '#', ' ', ' ', '#',
    '#', ' ', '#', '#', ' ', '#', '#',
    '#', ' ', ' ', ' ', ' ', ' ', '#',
    '#', '#', '#', '#', '#', '#', '#'
]

# Convert the grid to a matrix
grid_matrix = reshape(grid, 7, 5)

# Define start and goal positions
start = (2, 2)  # Starting at (2,2)
goal = (4, 5)   # Goal at (4,5)

# Execute Dijkstra's algorithm
path = dijkstra(grid_matrix, start, goal)

# Print the results
println("Shortest path from $start to $goal:")
println(path)

# Optional: Visualize the path on the grid
for pos in path
    if pos != start && pos != goal
        grid_matrix[pos...] = '*'
    end
end

println("\nGrid with path:")
for row in eachrow(grid_matrix)
    println(join(row))
end
